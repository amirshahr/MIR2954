
```{r}
head(mir_geno_pheno)
```




```{r}

pheno_data <- mir_geno_pheno %>%
  mutate(
    genotype = recode(genotype, "het" = "HZ", "hz" = "HZ", "hom" = "KO", "wt" = "WT"),
    breed = recode(breed, "hl" = "HL", "F1" = "G2"),
    sex = recode(sex, "m" = "Male", "f" = "Female"),
    phenotype = str_to_title(phenotype),
    sex_genotype = paste0(sex, "_", genotype),
    age_group = recode(embryonic_age, "2" = "E2", "3" = "E3", "4" = "E4", "5" = "E5", "7" = "E7", "13" = "E13"),
    age_merged = recode(embryonic_age, "2" = "E2", "3" = "E3", "4" = "E4-5", "5" = "E4-5", "7" = "E7-13", "13" = "E7-13"),
    phenotype_2 = if_else(phenotype == "Alive", 0, 1),
    HH_stage = as.numeric(HH_stage),
    weight = as.numeric(weight),
    geno_breed = as.factor(paste0(breed, "_", genotype)),
    geno_sex_breed = as.factor(paste0(breed, "_", sex, "_", genotype))) %>%
  mutate_at(vars(age_group, sex_genotype, genotype, geno_breed), as.factor)

pheno_data$age_group <- factor(pheno_data$age_group, levels = c("E2", "E3", "E4", "E5", "E7", "E13"))
pheno_data$sex_genotype <- factor(pheno_data$sex_genotype, levels = c("Female_WT", "Female_KO", "Male_WT", "Male_HZ", "Male_KO"))
pheno_data$genotype <- factor(pheno_data$genotype, levels = c("WT", "HZ", "KO"))
pheno_data$geno_breed <- factor(pheno_data$geno_breed, levels = c("HL_WT", "G2_WT", "G2_HZ", "G2_KO"))
pheno_data$genotype <- factor(pheno_data$genotype, levels = c("WT", "HZ", "KO"))
pheno_data$geno_sex_breed <- factor(pheno_data$geno_sex_breed, levels = c("HL_Female_WT","G2_Female_WT", "G2_Female_KO" ,"HL_Male_WT","G2_Male_HZ","G2_Male_KO"  ))

levels(pheno_data$geno_sex_breed)


saveRDS(pheno_data, "/home/amir/miR-2954/datasets/MiR-2954_genotype_phenotype_data_tidy.rds")


```
Set up the theme 
```{r}
mir_survival_theme <- theme(
  strip.background = element_blank(),
  strip.text = element_text(size = 5, margin = margin(t = 1, r = 0, b = 1, l = 0)),
  plot.background = element_rect(fill = "transparent", color = NA),
  plot.margin = margin(t = 1, r = 1, b = 1, l = 1),
  text = element_text(size = 5),
  axis.text.x = element_text(angle = 45, hjust = 1, size = 5),
  axis.text = element_text(size = 5, color = "black"),
  axis.title = element_text(size = 5, color = "black"),
  axis.line = element_line(color = "black", size = 0.3), # Fixed this line
  legend.position = "right",
  legend.title = element_blank(),
  legend.text = element_text(size = 5, color = "black"),
  legend.spacing.x = unit(0.01, "cm"),
  legend.spacing.y = unit(0.01, "cm"),
  legend.margin = margin(t = 0, r = 0, b = 0, l = -10),
  legend.key.size = unit(0.3, "lines"),
  legend.background = element_rect(fill = "white", color = "white"), 
  legend.box.margin = margin(t = 0, r = 0, b = 0, l = 0),
  panel.spacing = unit(0.5, "lines"),
  panel.background = element_rect(fill = "transparent", color = "NA")
)


  
```



```{r fig.width= 15}
# Load ggtext package
pheno_data <- read_rds("/home/amir/miR-2954/datasets/MiR-2954_genotype_phenotype_data_tidy.rds")
pheno_data


library(ggtext)

F1_pheno <- pheno_data %>% filter(breed == "G2" & age_merged %in% c("E3", "E4-5", "E7-13"))
F1_pheno

count_data <- F1_pheno %>%
  group_by(age_merged, sex_genotype, phenotype) %>%
  summarise(count = n()) %>%
  mutate(prop = count / sum(count))

count_data <- count_data %>%
  mutate(display_sex_genotype = recode(sex_genotype,
                                       "Female_WT" = "ZW",
                                       "Female_KO" = "Z^KO*W",
                                       "Male_HZ" = "Z^KO*Z",
                                       "Male_KO" = "Z^KO*Z^KO"))

total_count_data <- count_data %>%
  group_by(age_merged, display_sex_genotype) %>%
  summarise(total_count = sum(count))

alive_count_data <- count_data %>%
  group_by(age_merged, display_sex_genotype) %>%
  summarise(alive_count = sum(count[phenotype == "Alive"])) %>%
  left_join(total_count_data, by = c("age_merged", "display_sex_genotype"))

alive_count_data


survival_bar_plot <- ggplot(data = count_data, aes(x = as.factor(age_merged))) +
  geom_bar(aes(y = prop, fill = phenotype), position = "fill", stat = "identity", color = "black", size = 0.1) +
  geom_text(data = alive_count_data, aes(label = paste(total_count), y = 1), vjust = -0.25 , size = 1.8) +
  scale_fill_manual(values = c("Dead" = "#6664AB", "Alive" = "#DCE9F8"), name = "") +
  theme_classic() +
  facet_wrap(~display_sex_genotype, ncol = 4, labeller = label_parsed) + # Use display_sex_genotype for faceting
  xlab("Embryonic Age") +
  ylab("Proportion") + 
  mir_survival_theme + 
  scale_y_continuous(limits = c(0, 1.1), breaks = c(0.5, 1))

survival_bar_plot


ggsave(
  plot = survival_bar_plot,
  filename = "/home/amir/miR-2954/plots/Proportion_of_survived_embryos_G1.pdf",
  device = "pdf",
  width = 7,
  height = 3,
  units = "cm",
  dpi = 300,
  bg = "transparent",
  useDingbats = FALSE
)


```
```{r}
alive_count_data

alive_prop <- alive_count_data %>% mutate (prop_alive = (alive_count/total_count)*100 ) %>%
  group_by(display_sex_genotype) %>%
  summarize(avg_prop_alive = mean(prop_alive))

alive_prop



```






Figure X: Bar chart depicting the proportion of dead and alive individuals across different embryonic ages, grouped by sex and genotype. The x-axis represents embryonic age, and the y-axis represents the proportion of individuals. Each bar is split into two segments with distinct colors, where light blue represents alive individuals and dark red represents dead individuals. The total number of individuals in each group is indicated above the bars. The plot is faceted by sex and genotype, with separate panels for each combination.

```{r}
mir_boxplot_theme <- theme(
  strip.background = element_blank(),
  strip.text = element_text(size = 5, margin = margin(t = 0, r = 0, b = 0, l = 0)),
  plot.background = element_rect(fill = "transparent", color = NA),
  plot.margin = margin(t = 0, r = 0, b = -9, l = 0),
  text = element_text(size = 5),
  axis.text.x = element_text(angle = 45, hjust = 1, size = 5),
  axis.title.y = element_text(vjust = -2),
  axis.text = element_text(size = 5, color = "black"),
  axis.title = element_text(size = 5, color = "black"),
  axis.line = element_line(color = "black"),
  legend.position = "right",
  legend.title = element_blank(),
  legend.text = element_text(size = 5, color = "black"),
  legend.spacing.x = unit(0.01, "cm"),
  legend.spacing.y = unit(0.01, "cm"),
  legend.margin = margin(t = 0, r = -10, b = 0, l = 0),
  legend.key.size = unit(0.3, "lines"),
  legend.background = element_rect(fill = "white", color = "white"), 
  legend.box.margin = margin(t = 0, r = 0, b = 0, l = 0),
  panel.spacing = unit(0.5, "lines"),   # Add panel.spacing attribute
  panel.background = element_rect(fill = "transparent", color = "NA") # Add panel.background attribute
)

```


Weight 

```{r fig.width= 15}

head(pheno_data)
E13_weight<- pheno_data %>%
  filter(phenotype == "Alive" & age_group == "E13" & !is.na(weight)) %>%
  droplevels() %>%
  mutate(geno_sex_breed = factor(geno_sex_breed, levels = c("HL_Female_WT", "G2_Female_WT", "G2_Female_KO", "HL_Male_WT", "G2_Male_HZ")))
E13_weight$geno_sex_breed



# Perform the Wilcoxon tests and save the p-values:
wilcox_result1 <- wilcox.test(weight ~ geno_sex_breed, data = E13_weight, subset = geno_sex_breed %in% c("HL_Female_WT", "G2_Female_WT"), exact = FALSE)
p_value1 <- wilcox_result1$p.value

wilcox_result2 <- wilcox.test(weight ~ geno_sex_breed, data = E13_weight, subset = geno_sex_breed %in% c("G2_Female_WT", "G2_Female_KO"), exact = FALSE)
p_value2 <- wilcox_result2$p.value

wilcox_result3 <- wilcox.test(weight ~ geno_sex_breed, data = E13_weight, subset = geno_sex_breed %in% c("HL_Male_WT", "G2_Male_HZ"), exact = FALSE)
p_value3 <- wilcox_result3$p.value

# Collect p-values
p_values <- c(p_value1, p_value2, p_value3)

# Adjust p-values
p_adjusted <- p.adjust(p_values, method = "BH")

# Now use p_adjusted in your plot annotations
E13_plot <- E13_weight %>% 
  ggplot(aes(x = geno_sex_breed, y = weight)) +
  geom_boxplot(aes (fill = sex),notch = FALSE, lwd = 0.25, fatten = 0.8, color = "black") +
  geom_beeswarm(aes (fill = sex), outlier.shape = NA, size = 0.1) +
  scale_fill_manual(values = c("Female" = "#DBE9FF", "Male" = "#DBE9FF")) + 
  guides (fill= FALSE) + 
  theme_classic() +
  geom_segment(aes(x = 1.1, xend = 1.9, y = max(E13_weight$weight) + 0.5, yend = max(E13_weight$weight) + 0.5), color = "black", size = 0.25) +
  geom_segment(aes(x = 2.1, xend = 2.9, y = max(E13_weight$weight) + 0.5, yend = max(E13_weight$weight) + 0.5), color = "black", size = 0.25) +
  geom_segment(aes(x = 4.1, xend = 4.9, y = max(E13_weight$weight) + 0.5, yend = max(E13_weight$weight) + 0.5), color = "black", size = 0.25) +
  annotate("text", x = 1.5, y = max(E13_weight$weight) + 1.1, label = paste(formatC(p_adjusted[1], format = "e", digits = 1)), size = 2) +
  annotate("text", x = 2.5, y = max(E13_weight$weight) + 1.1, label = paste(formatC(p_adjusted[2], format = "e", digits = 1)), size = 2) +
  annotate("text", x = 4.5, y = max(E13_weight$weight) + 1.1, label = paste(formatC(p_adjusted[3], format = "e", digits = 1)), size = 2) +
  ylab("Weight(g)") + 
  xlab("") +
  scale_x_discrete(labels = c("HL_Female_WT" = "ZW(HL)",
                              "G2_Female_WT" =  "ZW(G2)",
                              "G2_Female_KO" = expression(paste("Z", {}^KO, "W", "(G2)")),
                              "HL_Male_WT" = "ZZ(HL)",
                              "G2_Male_HZ" = expression(paste("Z", {}^KO, "Z", "(G2)")))) + 
  mir_boxplot_theme +
  scale_y_continuous(limits = c(3.5, 10), breaks = c(4,6,8))


E13_plot


ggsave(
  plot = E13_plot,
  filename = "/home/amir/miR-2954/plots/Embryo_weight_E13.pdf",
  device = "pdf",
  width = 7,
  height = 2.6,
  units = "cm",
  dpi = 300,
  bg = "transparent",
  useDingbats = FALSE
)



```

```{r fig.width= 15}

head(pheno_data)
E13_weight<- pheno_data %>%
  filter(phenotype == "Alive" & age_group == "E13" & breed == "G2" & !is.na(weight)) %>%
  droplevels() %>%
  mutate(geno_sex_breed = factor(geno_sex_breed, levels = c("G2_Female_WT", "G2_Female_KO", "G2_Male_HZ")))
E13_weight$geno_sex_breed


# Perform the Wilcoxon tests and save the p-values:
wilcox_result1 <- wilcox.test(weight ~ geno_sex_breed, data = E13_weight, subset = geno_sex_breed %in% c("G2_Female_WT", "G2_Female_KO"), exact = FALSE)
p_value1 <- wilcox_result1$p.value

wilcox_result2 <- wilcox.test(weight ~ geno_sex_breed, data = E13_weight, subset = geno_sex_breed %in% c("G2_Female_KO", "G2_Male_HZ") , exact = FALSE)
p_value2 <- wilcox_result2$p.value

wilcox_result3 <- wilcox.test(weight ~ geno_sex_breed, data = E13_weight, subset = geno_sex_breed %in% c("G2_Female_WT", "G2_Male_HZ"), exact = FALSE)
p_value3 <- wilcox_result3$p.value

# Collect p-values
p_values <- c(p_value1, p_value2, p_value3)
p_values

# Adjust p-values
p_adjusted <- p.adjust(p_values, method = "BH")
p_adjusted

E13_plot <- E13_weight %>% 
  ggplot(aes(x = geno_sex_breed, y = weight)) +
  geom_boxplot(aes(fill = sex), notch = FALSE, lwd = 0.25, fatten = 0.8, color = "black") +
  geom_beeswarm(aes(fill = sex), outlier.shape = NA, size = 0.005, width = 1.2) +
  scale_fill_manual(values = c("Female" = "#DBE9FF", "Male" = "#DBE9FF")) + 
  guides(fill = FALSE) + 
  theme_classic() +
  geom_segment(aes(x = 1.1, xend = 1.9, y = max(E13_weight$weight) + 0.5, yend = max(E13_weight$weight) + 0.5), color = "black", size = 0.2) +
  geom_segment(aes(x = 2.1, xend = 2.9, y = max(E13_weight$weight) + 0.5, yend = max(E13_weight$weight) + 0.5), color = "black", size = 0.22) +
  geom_segment(aes(x = 1.6, xend = 2.4, y = max(E13_weight$weight) + 1.6, yend = max(E13_weight$weight) + 1.6), color = "black", size = 0.2) +
  annotate("text", x = 1.5, y = max(E13_weight$weight) + 1.1, label = paste(formatC(p_adjusted[1], format = "e", digits = 1)), size = 2) +
  annotate("text", x = 2.5, y = max(E13_weight$weight) + 1.1, label = paste(formatC(p_adjusted[2], format = "e", digits = 1)), size = 2) +
  annotate("text", x = 2, y = max(E13_weight$weight) + 2.3, label = paste(formatC(p_adjusted[3], format = "e", digits = 1)), size = 2) +
  ylab("Weight (g)") + 
  xlab("") +
  scale_x_discrete(labels = c("G2_Female_WT" = "ZW",
                              "G2_Female_KO" = expression(paste("Z", {}^KO, "W")),
                              "G2_Male_HZ" = expression(paste("Z", {}^KO, "Z")))) + 
  mir_boxplot_theme +
  scale_y_continuous(limits = c(3.5, 11.5), breaks = c(4, 6, 8, 10), expand = expansion(mult = c(0, .0)))
E13_plot


ggsave(
  plot = E13_plot,
  filename = "/home/amir/miR-2954/plots/Embryo_weight_E13.pdf",
  device = "pdf",
  width = 3.5,
  height = 2.6,
  units = "cm",
  dpi = 300,
  bg = "transparent",
  useDingbats = FALSE
)

```


Figure Y: E13 alive individuals' weight distribution across sex and genotype. The x-axis denotes sex-genotype-breed combinations, and the y-axis displays weight (g). Boxplots are color-coded by sex (light blue: female, dark blue: male), with individual data points as dots. Wilcoxon test p-values indicate statistical significance between groups.



```{r fig.width= 15}


E3_HH <- pheno_data %>%
  filter(phenotype == "Alive" & breed == "G2" & age_group == "E3" & !is.na(HH_stage)) %>%
  mutate(geno_sex_breed = factor(geno_sex_breed, levels = c( "G2_Female_WT", "G2_Female_KO", "G2_Male_HZ", "G2_Male_KO")))  %>%
droplevels()
E3_HH$geno_sex_breed

#Perform the Wilcoxon tests and save the p-values:
wilcox_result1 <- wilcox.test(HH_stage ~ geno_sex_breed, data = E3_HH, subset = geno_sex_breed %in% c("G2_Female_WT", "G2_Female_KO"), exact = FALSE)
p_value1 <- wilcox_result1$p.value


wilcox_result2 <- wilcox.test(HH_stage ~ geno_sex_breed, data = E3_HH, subset = geno_sex_breed %in% c("G2_Male_HZ", "G2_Male_KO"), exact = FALSE)
p_value2 <- wilcox_result2$p.value


# Collect p-values
p_values <- c(p_value1, p_value2)

# Adjust p-values
p_adjusted <- p.adjust(p_values, method = "BH")


E3_plot <- E3_HH %>% 
  ggplot(aes(x = geno_sex_breed, y = HH_stage)) +
  geom_boxplot(notch = FALSE, outlier.shape = NA, fill = "#DBE9FF", lwd = 0.25, fatten = 0.9, color = "black") +
  geom_beeswarm(size = 0.05) +
  theme_classic() +
  geom_segment(aes(x = 1.1, xend = 1.9, y = max(E3_HH$HH_stage) + 0.5, yend = max(E3_HH$HH_stage) + 0.5), color = "black") +
  geom_segment(aes(x = 3.1, xend = 3.9, y = max(E3_HH$HH_stage) + 0.5, yend = max(E3_HH$HH_stage) + 0.5), color = "black") +
  
  annotate("text", x = 1.5, y = max(E3_HH$HH_stage) + 0.8, label = paste(formatC(p_adjusted[1], format = "e", digits = 1)), size = 2) +
  annotate("text", x = 3.5, y = max(E3_HH$HH_stage) + 0.8, label = paste(formatC(p_adjusted[2], format = "e", digits = 1)), size = 2) +
  
  ylab("Stage (HH)") + 
  xlab("") +
   scale_x_discrete(labels = c("G2_Female_WT" = "ZW",
                              "G2_Female_KO" = expression(paste("Z", {}^KO, "W")),
                              "G2_Male_HZ" = expression(paste("Z", {}^KO, "Z")),
                              "G2_Male_KO" = expression(paste("Z", {}^KO, "Z", {}^KO )))) + 
  scale_y_continuous(limits = c(15.5, 19), breaks = c(16, 17, 18), expand = expansion(mult = c(0, .0))) +
  mir_boxplot_theme 

E3_plot


ggsave(
  plot = E3_plot,
  filename = "/home/amir/miR-2954/plots/Embryo_HH_E3_test.pdf",
  device = "pdf",
  width = 3.5,
  height = 2.6,
  units = "cm",
  dpi = 300,
  bg = "transparent",
  useDingbats = FALSE
)





```










```{r}

head(F1_pheno) 


F1_pheno_KO <- F1_pheno %>% filter(sex_genotype == "Male_KO" & embryonic_age %in%  c(3,5,7,13))


require(survival)

chick_surv_fit <- survfit(Surv(time = embryonic_age, event = event) ~ sex_genotype , data = F1_pheno_KO) 
summary (chick_surv_fit)

```


Basic plot for survival analysis

```{r fig.width= 10}

ggsurvplot(chick_surv_fit,
           data = F1_pheno,
           xlim = c(0,14),
           xlab = "Incubation day",
           ylab = "Survival %",
           break.time.by = 3,
           pval = TRUE, 
           legend.title = "Genotype_sex",
           censor = FALSE)



```
